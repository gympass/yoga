import * as yogaTokens from '@gympass/yoga-tokens';
import PropTypes from 'prop-types';
import React from 'react';
import { ThemeProvider } from 'styled-components';
import yogaThemeBuilder from '../theme';

/**
 *
 * @param {Function} builder theme builder function, returns an object with custom theme tokens
 * @param {Object.<string, string | number>} tokens default tokens from standard Yoga theme
 * @returns {null | Object.<string, string | number>} null if there's no builder, otherwise return custom tokens
 */
const getBuilderTokens = (builder, tokens) => {
  if (!builder) {
    return {};
  }

  const isThemeInvalid = builder ? !('isFromThemeBuilder' in builder) : false;

  if (isThemeInvalid) {
    throw new TypeError(
      `Invalid 'theme' parameter. Expected one generated by createTheme() function.
    Did you sent a function directly to <ThemeProvider />?
    `,
    );
  }

  const customTokens = builder(tokens);

  if (typeof customTokens !== 'object') {
    throw TypeError(
      `Invalid 'theme' return value. Expected 'object', got ${typeof builder(
        tokens,
      )}.`,
    );
  }

  return customTokens;
};

/**
 * Gets resolved theme to inject in Yoga
 *
 * @param {{locale: string, theme: function}} themeParameters information about the theme
 * @param {string} themeParameters.locale custom locale to get colors from (if it has a different scheme)
 * @param {function} themeParameters.theme returns a custom theme object to replace existing tokens
 * @returns {Object.<string, string | number>} theme object with tokens sent to styled-components' <ThemeProvider />
 */
const getTheme = ({ locale, theme }) => {
  const tokens = yogaTokens[locale] || yogaTokens.default;
  const customTokens = getBuilderTokens(theme, tokens);

  return yogaThemeBuilder(tokens, customTokens);
};

/** This component provides a theme to all React components underneath itself via the context API. */
const Provider = ({ locale = 'pt-BR', theme, ...rest }) => (
  <ThemeProvider theme={{ yoga: getTheme({ locale, theme }) }} {...rest} />
);

Provider.propTypes = {
  locale: PropTypes.string,
};

export default Provider;
